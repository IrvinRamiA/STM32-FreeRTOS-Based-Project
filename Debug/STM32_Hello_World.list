
STM32_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d4  080013d4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080013d4  080013d4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013d4  080013d4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080013dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d40  20000018  080013f4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012d58  080013f4  00022d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a98  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000de2  00000000  00000000  00025ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000558  00000000  00000000  000268c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e0  00000000  00000000  00026e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000104bb  00000000  00000000  00027300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004612  00000000  00000000  000377bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000691b1  00000000  00000000  0003bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a4f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  000a4ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080013ac 	.word	0x080013ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	080013ac 	.word	0x080013ac

08000210 <main>:

void Task1Handler(void *params);
void Task2Handler(void *params);

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8
	RCC_DeInit();
 8000216:	f000 f95b 	bl	80004d0 <RCC_DeInit>
	SystemCoreClockUpdate();
 800021a:	f000 f861 	bl	80002e0 <SystemCoreClockUpdate>

	xTaskCreate(
 800021e:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <main+0x38>)
 8000220:	9301      	str	r3, [sp, #4]
 8000222:	2302      	movs	r3, #2
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2300      	movs	r3, #0
 8000228:	2282      	movs	r2, #130	; 0x82
 800022a:	4908      	ldr	r1, [pc, #32]	; (800024c <main+0x3c>)
 800022c:	4808      	ldr	r0, [pc, #32]	; (8000250 <main+0x40>)
 800022e:	f000 fa02 	bl	8000636 <xTaskCreate>
		configMINIMAL_STACK_SIZE,
		NULL,
		2,
		&xTaskHandle1);

	xTaskCreate(
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <main+0x44>)
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2302      	movs	r3, #2
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	2282      	movs	r2, #130	; 0x82
 800023e:	4906      	ldr	r1, [pc, #24]	; (8000258 <main+0x48>)
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <main+0x4c>)
 8000242:	f000 f9f8 	bl	8000636 <xTaskCreate>
		configMINIMAL_STACK_SIZE,
		NULL,
		2,
		&xTaskHandle2);

	while(1);
 8000246:	e7fe      	b.n	8000246 <main+0x36>
 8000248:	20000034 	.word	0x20000034
 800024c:	080013c4 	.word	0x080013c4
 8000250:	08000261 	.word	0x08000261
 8000254:	20000038 	.word	0x20000038
 8000258:	080013cc 	.word	0x080013cc
 800025c:	0800026b 	.word	0x0800026b

08000260 <Task1Handler>:
}

void Task1Handler(void *params)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	while(1);
 8000268:	e7fe      	b.n	8000268 <Task1Handler+0x8>

0800026a <Task2Handler>:
}

void Task2Handler(void *params)
{
 800026a:	b480      	push	{r7}
 800026c:	b083      	sub	sp, #12
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
	while(1);
 8000272:	e7fe      	b.n	8000272 <Task2Handler+0x8>

08000274 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <SystemInit+0x60>)
 800027a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800027e:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <SystemInit+0x60>)
 8000280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <SystemInit+0x64>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <SystemInit+0x64>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <SystemInit+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <SystemInit+0x64>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <SystemInit+0x64>)
 80002a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <SystemInit+0x64>)
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <SystemInit+0x68>)
 80002ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <SystemInit+0x64>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <SystemInit+0x64>)
 80002b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <SystemInit+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80002c2:	f000 f889 	bl	80003d8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <SystemInit+0x60>)
 80002c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002cc:	609a      	str	r2, [r3, #8]
#endif
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	e000ed00 	.word	0xe000ed00
 80002d8:	40023800 	.word	0x40023800
 80002dc:	24003010 	.word	0x24003010

080002e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b087      	sub	sp, #28
 80002e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	2302      	movs	r3, #2
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	2302      	movs	r3, #2
 80002f8:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 030c 	and.w	r3, r3, #12
 8000302:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	2b04      	cmp	r3, #4
 8000308:	d007      	beq.n	800031a <SystemCoreClockUpdate+0x3a>
 800030a:	2b08      	cmp	r3, #8
 800030c:	d009      	beq.n	8000322 <SystemCoreClockUpdate+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	d13d      	bne.n	800038e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 8000314:	4a2d      	ldr	r2, [pc, #180]	; (80003cc <SystemCoreClockUpdate+0xec>)
 8000316:	601a      	str	r2, [r3, #0]
      break;
 8000318:	e03d      	b.n	8000396 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 800031c:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <SystemCoreClockUpdate+0xf0>)
 800031e:	601a      	str	r2, [r3, #0]
      break;
 8000320:	e039      	b.n	8000396 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	0d9b      	lsrs	r3, r3, #22
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000336:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d00c      	beq.n	8000358 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800033e:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <SystemCoreClockUpdate+0xf0>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	fbb2 f3f3 	udiv	r3, r2, r3
 8000346:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000348:	6852      	ldr	r2, [r2, #4]
 800034a:	0992      	lsrs	r2, r2, #6
 800034c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000350:	fb02 f303 	mul.w	r3, r2, r3
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	e00b      	b.n	8000370 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <SystemCoreClockUpdate+0xec>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000362:	6852      	ldr	r2, [r2, #4]
 8000364:	0992      	lsrs	r2, r2, #6
 8000366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800036a:	fb02 f303 	mul.w	r3, r2, r3
 800036e:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	f003 0303 	and.w	r3, r3, #3
 800037a:	3301      	adds	r3, #1
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 800038a:	6013      	str	r3, [r2, #0]
      break;
 800038c:	e003      	b.n	8000396 <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <SystemCoreClockUpdate+0xec>)
 8000392:	601a      	str	r2, [r3, #0]
      break;
 8000394:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	091b      	lsrs	r3, r3, #4
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <SystemCoreClockUpdate+0xf4>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	fa22 f303 	lsr.w	r3, r2, r3
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 80003b4:	6013      	str	r3, [r2, #0]
}
 80003b6:	bf00      	nop
 80003b8:	371c      	adds	r7, #28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800
 80003c8:	20000000 	.word	0x20000000
 80003cc:	00f42400 	.word	0x00f42400
 80003d0:	017d7840 	.word	0x017d7840
 80003d4:	20000004 	.word	0x20000004

080003d8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003e6:	4b36      	ldr	r3, [pc, #216]	; (80004c0 <SetSysClock+0xe8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a35      	ldr	r2, [pc, #212]	; (80004c0 <SetSysClock+0xe8>)
 80003ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003f0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <SetSysClock+0xe8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d103      	bne.n	8000410 <SetSysClock+0x38>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800040e:	d1f0      	bne.n	80003f2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <SetSysClock+0xe8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000418:	2b00      	cmp	r3, #0
 800041a:	d002      	beq.n	8000422 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800041c:	2301      	movs	r3, #1
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	e001      	b.n	8000426 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000422:	2300      	movs	r3, #0
 8000424:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d142      	bne.n	80004b2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <SetSysClock+0xe8>)
 800042e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000430:	4a23      	ldr	r2, [pc, #140]	; (80004c0 <SetSysClock+0xe8>)
 8000432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000436:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <SetSysClock+0xec>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <SetSysClock+0xec>)
 800043e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000442:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <SetSysClock+0xe8>)
 8000446:	4a1e      	ldr	r2, [pc, #120]	; (80004c0 <SetSysClock+0xe8>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <SetSysClock+0xe8>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <SetSysClock+0xe8>)
 8000452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000456:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <SetSysClock+0xe8>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <SetSysClock+0xe8>)
 800045e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000462:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <SetSysClock+0xe8>)
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <SetSysClock+0xf0>)
 8000468:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <SetSysClock+0xe8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <SetSysClock+0xe8>)
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000474:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000476:	bf00      	nop
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SetSysClock+0xe8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <SetSysClock+0xf4>)
 8000486:	f240 7205 	movw	r2, #1797	; 0x705
 800048a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <SetSysClock+0xe8>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <SetSysClock+0xe8>)
 8000492:	f023 0303 	bic.w	r3, r3, #3
 8000496:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <SetSysClock+0xe8>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <SetSysClock+0xe8>)
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80004a4:	bf00      	nop
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <SetSysClock+0xe8>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f003 030c 	and.w	r3, r3, #12
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d1f9      	bne.n	80004a6 <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40007000 	.word	0x40007000
 80004c8:	07405419 	.word	0x07405419
 80004cc:	40023c00 	.word	0x40023c00

080004d0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <RCC_DeInit+0x60>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a15      	ldr	r2, [pc, #84]	; (8000530 <RCC_DeInit+0x60>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <RCC_DeInit+0x60>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <RCC_DeInit+0x60>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <RCC_DeInit+0x60>)
 80004ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004f4:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <RCC_DeInit+0x60>)
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <RCC_DeInit+0x64>)
 80004fa:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <RCC_DeInit+0x60>)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <RCC_DeInit+0x68>)
 8000500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <RCC_DeInit+0x60>)
 8000506:	4a0d      	ldr	r2, [pc, #52]	; (800053c <RCC_DeInit+0x6c>)
 8000508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <RCC_DeInit+0x60>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <RCC_DeInit+0x60>)
 8000512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000516:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <RCC_DeInit+0x60>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <RCC_DeInit+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40023800 	.word	0x40023800
 8000534:	24003010 	.word	0x24003010
 8000538:	20003000 	.word	0x20003000
 800053c:	24003000 	.word	0x24003000

08000540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f103 0208 	add.w	r2, r3, #8
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f103 0208 	add.w	r2, r3, #8
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 0208 	add.w	r2, r3, #8
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005e2:	b480      	push	{r7}
 80005e4:	b085      	sub	sp, #20
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	6892      	ldr	r2, [r2, #8]
 80005f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	6852      	ldr	r2, [r2, #4]
 8000602:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	d103      	bne.n	8000616 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1e5a      	subs	r2, r3, #1
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000636:	b580      	push	{r7, lr}
 8000638:	b08c      	sub	sp, #48	; 0x30
 800063a:	af04      	add	r7, sp, #16
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4613      	mov	r3, r2
 8000644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fc74 	bl	8000f38 <pvPortMalloc>
 8000650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00e      	beq.n	8000676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000658:	2058      	movs	r0, #88	; 0x58
 800065a:	f000 fc6d 	bl	8000f38 <pvPortMalloc>
 800065e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d003      	beq.n	800066e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	e005      	b.n	800067a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f000 fd2a 	bl	80010c8 <vPortFree>
 8000674:	e001      	b.n	800067a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d013      	beq.n	80006a8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000680:	88fa      	ldrh	r2, [r7, #6]
 8000682:	2300      	movs	r3, #0
 8000684:	9303      	str	r3, [sp, #12]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f80e 	bl	80006b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800069c:	69f8      	ldr	r0, [r7, #28]
 800069e:	f000 f899 	bl	80007d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e002      	b.n	80006ae <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80006ae:	69bb      	ldr	r3, [r7, #24]
	}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	461a      	mov	r2, r3
 80006d0:	21a5      	movs	r1, #165	; 0xa5
 80006d2:	f000 fe63 	bl	800139c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80006d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006e0:	3b01      	subs	r3, #1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	f023 0307 	bic.w	r3, r3, #7
 80006ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d009      	beq.n	800070e <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e7fe      	b.n	800070c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d01f      	beq.n	8000754 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	e012      	b.n	8000740 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	4413      	add	r3, r2
 8000720:	7819      	ldrb	r1, [r3, #0]
 8000722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	4413      	add	r3, r2
 8000728:	3334      	adds	r3, #52	; 0x34
 800072a:	460a      	mov	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3301      	adds	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	2b09      	cmp	r3, #9
 8000744:	d9e9      	bls.n	800071a <prvInitialiseNewTask+0x62>
 8000746:	e000      	b.n	800074a <prvInitialiseNewTask+0x92>
			{
				break;
 8000748:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074c:	2200      	movs	r2, #0
 800074e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000752:	e003      	b.n	800075c <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	2b04      	cmp	r3, #4
 8000760:	d901      	bls.n	8000766 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000762:	2304      	movs	r3, #4
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000774:	2200      	movs	r2, #0
 8000776:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077a:	3304      	adds	r3, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff feff 	bl	8000580 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000784:	3318      	adds	r3, #24
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fefa 	bl	8000580 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000794:	f1c3 0205 	rsb	r2, r3, #5
 8000798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80007a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a4:	2200      	movs	r2, #0
 80007a6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80007a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	69b8      	ldr	r0, [r7, #24]
 80007b6:	f000 fa97 	bl	8000ce8 <pxPortInitialiseStack>
 80007ba:	4602      	mov	r2, r0
 80007bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80007dc:	f000 fafc 	bl	8000dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <prvAddNewTaskToReadyList+0xc0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a2b      	ldr	r2, [pc, #172]	; (8000894 <prvAddNewTaskToReadyList+0xc0>)
 80007e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d109      	bne.n	8000806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80007f2:	4a29      	ldr	r2, [pc, #164]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <prvAddNewTaskToReadyList+0xc0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d110      	bne.n	8000822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000800:	f000 fa12 	bl	8000c28 <prvInitialiseTaskLists>
 8000804:	e00d      	b.n	8000822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <prvAddNewTaskToReadyList+0xc8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d109      	bne.n	8000822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000818:	429a      	cmp	r2, r3
 800081a:	d802      	bhi.n	8000822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800081c:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <prvAddNewTaskToReadyList+0xcc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <prvAddNewTaskToReadyList+0xcc>)
 800082a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <prvAddNewTaskToReadyList+0xcc>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000838:	2201      	movs	r2, #1
 800083a:	409a      	lsls	r2, r3
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <prvAddNewTaskToReadyList+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4313      	orrs	r3, r2
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <prvAddNewTaskToReadyList+0xd0>)
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <prvAddNewTaskToReadyList+0xd4>)
 8000854:	441a      	add	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3304      	adds	r3, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4610      	mov	r0, r2
 800085e:	f7ff fe9c 	bl	800059a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000862:	f000 fae7 	bl	8000e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <prvAddNewTaskToReadyList+0xc8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00e      	beq.n	800088c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <prvAddNewTaskToReadyList+0xd8>)
 800087e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000110 	.word	0x20000110
 8000898:	2000003c 	.word	0x2000003c
 800089c:	2000011c 	.word	0x2000011c
 80008a0:	2000012c 	.word	0x2000012c
 80008a4:	20000118 	.word	0x20000118
 80008a8:	20000040 	.word	0x20000040
 80008ac:	e000ed04 	.word	0xe000ed04

080008b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <vTaskSuspendAll+0x18>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <vTaskSuspendAll+0x18>)
 80008bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000134 	.word	0x20000134

080008cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <xTaskResumeAll+0x114>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <xTaskResumeAll+0x2a>
 80008e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e6:	f383 8811 	msr	BASEPRI, r3
 80008ea:	f3bf 8f6f 	isb	sy
 80008ee:	f3bf 8f4f 	dsb	sy
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	e7fe      	b.n	80008f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80008f6:	f000 fa6f 	bl	8000dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <xTaskResumeAll+0x114>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <xTaskResumeAll+0x114>)
 8000902:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <xTaskResumeAll+0x114>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d161      	bne.n	80009d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <xTaskResumeAll+0x118>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d05d      	beq.n	80009d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000914:	e02e      	b.n	8000974 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000916:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <xTaskResumeAll+0x11c>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3318      	adds	r3, #24
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe5d 	bl	80005e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3304      	adds	r3, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe58 	bl	80005e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	2201      	movs	r2, #1
 8000938:	409a      	lsls	r2, r3
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <xTaskResumeAll+0x120>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4313      	orrs	r3, r2
 8000940:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <xTaskResumeAll+0x120>)
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <xTaskResumeAll+0x124>)
 8000952:	441a      	add	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3304      	adds	r3, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4610      	mov	r0, r2
 800095c:	f7ff fe1d 	bl	800059a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <xTaskResumeAll+0x128>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	429a      	cmp	r2, r3
 800096c:	d302      	bcc.n	8000974 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <xTaskResumeAll+0x12c>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <xTaskResumeAll+0x11c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1cc      	bne.n	8000916 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000982:	f000 f991 	bl	8000ca8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <xTaskResumeAll+0x130>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d010      	beq.n	80009b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000992:	f000 f837 	bl	8000a04 <xTaskIncrementTick>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <xTaskResumeAll+0x12c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f1      	bne.n	8000992 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <xTaskResumeAll+0x130>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <xTaskResumeAll+0x12c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d009      	beq.n	80009d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80009bc:	2301      	movs	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <xTaskResumeAll+0x134>)
 80009c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80009d0:	f000 fa30 	bl	8000e34 <vPortExitCritical>

	return xAlreadyYielded;
 80009d4:	68bb      	ldr	r3, [r7, #8]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000134 	.word	0x20000134
 80009e4:	20000110 	.word	0x20000110
 80009e8:	200000d4 	.word	0x200000d4
 80009ec:	20000118 	.word	0x20000118
 80009f0:	20000040 	.word	0x20000040
 80009f4:	2000003c 	.word	0x2000003c
 80009f8:	20000124 	.word	0x20000124
 80009fc:	20000120 	.word	0x20000120
 8000a00:	e000ed04 	.word	0xe000ed04

08000a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a0e:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <xTaskIncrementTick+0x144>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 808d 	bne.w	8000b32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <xTaskIncrementTick+0x148>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000a20:	4a4a      	ldr	r2, [pc, #296]	; (8000b4c <xTaskIncrementTick+0x148>)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d11f      	bne.n	8000a6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000a2c:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <xTaskIncrementTick+0x14c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d009      	beq.n	8000a4a <xTaskIncrementTick+0x46>
 8000a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a3a:	f383 8811 	msr	BASEPRI, r3
 8000a3e:	f3bf 8f6f 	isb	sy
 8000a42:	f3bf 8f4f 	dsb	sy
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	e7fe      	b.n	8000a48 <xTaskIncrementTick+0x44>
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <xTaskIncrementTick+0x14c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <xTaskIncrementTick+0x150>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a3e      	ldr	r2, [pc, #248]	; (8000b50 <xTaskIncrementTick+0x14c>)
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4a3e      	ldr	r2, [pc, #248]	; (8000b54 <xTaskIncrementTick+0x150>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <xTaskIncrementTick+0x154>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a3c      	ldr	r2, [pc, #240]	; (8000b58 <xTaskIncrementTick+0x154>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	f000 f91e 	bl	8000ca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000a6c:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <xTaskIncrementTick+0x158>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d348      	bcc.n	8000b08 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <xTaskIncrementTick+0x14c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d104      	bne.n	8000a8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <xTaskIncrementTick+0x158>)
 8000a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a86:	601a      	str	r2, [r3, #0]
					break;
 8000a88:	e03e      	b.n	8000b08 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <xTaskIncrementTick+0x14c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d203      	bcs.n	8000aaa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <xTaskIncrementTick+0x158>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000aa8:	e02e      	b.n	8000b08 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3304      	adds	r3, #4
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fd97 	bl	80005e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d004      	beq.n	8000ac6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	3318      	adds	r3, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fd8e 	bl	80005e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	2201      	movs	r2, #1
 8000acc:	409a      	lsls	r2, r3
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <xTaskIncrementTick+0x15c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	4a22      	ldr	r2, [pc, #136]	; (8000b60 <xTaskIncrementTick+0x15c>)
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <xTaskIncrementTick+0x160>)
 8000ae6:	441a      	add	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3304      	adds	r3, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	4610      	mov	r0, r2
 8000af0:	f7ff fd53 	bl	800059a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <xTaskIncrementTick+0x164>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3b9      	bcc.n	8000a76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b06:	e7b6      	b.n	8000a76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <xTaskIncrementTick+0x164>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0e:	4915      	ldr	r1, [pc, #84]	; (8000b64 <xTaskIncrementTick+0x160>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	440b      	add	r3, r1
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d901      	bls.n	8000b24 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <xTaskIncrementTick+0x168>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d007      	beq.n	8000b3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e004      	b.n	8000b3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <xTaskIncrementTick+0x16c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <xTaskIncrementTick+0x16c>)
 8000b3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000b3c:	697b      	ldr	r3, [r7, #20]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000134 	.word	0x20000134
 8000b4c:	20000114 	.word	0x20000114
 8000b50:	200000cc 	.word	0x200000cc
 8000b54:	200000d0 	.word	0x200000d0
 8000b58:	20000128 	.word	0x20000128
 8000b5c:	20000130 	.word	0x20000130
 8000b60:	20000118 	.word	0x20000118
 8000b64:	20000040 	.word	0x20000040
 8000b68:	2000003c 	.word	0x2000003c
 8000b6c:	20000124 	.word	0x20000124
 8000b70:	20000120 	.word	0x20000120

08000b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <vTaskSwitchContext+0xa0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <vTaskSwitchContext+0xa4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000b88:	e03e      	b.n	8000c08 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <vTaskSwitchContext+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <vTaskSwitchContext+0xa8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	fab3 f383 	clz	r3, r3
 8000b9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	f1c3 031f 	rsb	r3, r3, #31
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	491e      	ldr	r1, [pc, #120]	; (8000c20 <vTaskSwitchContext+0xac>)
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d109      	bne.n	8000bce <vTaskSwitchContext+0x5a>
	__asm volatile
 8000bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bbe:	f383 8811 	msr	BASEPRI, r3
 8000bc2:	f3bf 8f6f 	isb	sy
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	e7fe      	b.n	8000bcc <vTaskSwitchContext+0x58>
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <vTaskSwitchContext+0xac>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d104      	bne.n	8000bfe <vTaskSwitchContext+0x8a>
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <vTaskSwitchContext+0xb0>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000134 	.word	0x20000134
 8000c18:	20000124 	.word	0x20000124
 8000c1c:	20000118 	.word	0x20000118
 8000c20:	20000040 	.word	0x20000040
 8000c24:	2000003c 	.word	0x2000003c

08000c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	e00c      	b.n	8000c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <prvInitialiseTaskLists+0x60>)
 8000c40:	4413      	add	r3, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc7c 	bl	8000540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d9ef      	bls.n	8000c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <prvInitialiseTaskLists+0x64>)
 8000c56:	f7ff fc73 	bl	8000540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <prvInitialiseTaskLists+0x68>)
 8000c5c:	f7ff fc70 	bl	8000540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <prvInitialiseTaskLists+0x6c>)
 8000c62:	f7ff fc6d 	bl	8000540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <prvInitialiseTaskLists+0x70>)
 8000c68:	f7ff fc6a 	bl	8000540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <prvInitialiseTaskLists+0x74>)
 8000c6e:	f7ff fc67 	bl	8000540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <prvInitialiseTaskLists+0x78>)
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <prvInitialiseTaskLists+0x64>)
 8000c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <prvInitialiseTaskLists+0x7c>)
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <prvInitialiseTaskLists+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000040 	.word	0x20000040
 8000c8c:	200000a4 	.word	0x200000a4
 8000c90:	200000b8 	.word	0x200000b8
 8000c94:	200000d4 	.word	0x200000d4
 8000c98:	200000e8 	.word	0x200000e8
 8000c9c:	200000fc 	.word	0x200000fc
 8000ca0:	200000cc 	.word	0x200000cc
 8000ca4:	200000d0 	.word	0x200000d0

08000ca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <prvResetNextTaskUnblockTime+0x38>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8000cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000cc0:	e008      	b.n	8000cd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <prvResetNextTaskUnblockTime+0x38>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	200000cc 	.word	0x200000cc
 8000ce4:	20000130 	.word	0x20000130

08000ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b04      	subs	r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f023 0201 	bic.w	r2, r3, #1
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3b04      	subs	r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <pxPortInitialiseStack+0x64>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3b14      	subs	r3, #20
 8000d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3b04      	subs	r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f06f 0202 	mvn.w	r2, #2
 8000d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3b20      	subs	r3, #32
 8000d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	08000d51 	.word	0x08000d51

08000d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <prvTaskExitError+0x50>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d62:	d009      	beq.n	8000d78 <prvTaskExitError+0x28>
 8000d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d68:	f383 8811 	msr	BASEPRI, r3
 8000d6c:	f3bf 8f6f 	isb	sy
 8000d70:	f3bf 8f4f 	dsb	sy
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e7fe      	b.n	8000d76 <prvTaskExitError+0x26>
 8000d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7c:	f383 8811 	msr	BASEPRI, r3
 8000d80:	f3bf 8f6f 	isb	sy
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d8a:	bf00      	nop
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0fc      	beq.n	8000d8c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000014 	.word	0x20000014
	...

08000db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <pxCurrentTCBConst2>)
 8000db2:	6819      	ldr	r1, [r3, #0]
 8000db4:	6808      	ldr	r0, [r1, #0]
 8000db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dba:	f380 8809 	msr	PSP, r0
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f380 8811 	msr	BASEPRI, r0
 8000dca:	4770      	bx	lr
 8000dcc:	f3af 8000 	nop.w

08000dd0 <pxCurrentTCBConst2>:
 8000dd0:	2000003c 	.word	0x2000003c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop

08000dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de2:	f383 8811 	msr	BASEPRI, r3
 8000de6:	f3bf 8f6f 	isb	sy
 8000dea:	f3bf 8f4f 	dsb	sy
 8000dee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <vPortEnterCritical+0x54>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <vPortEnterCritical+0x54>)
 8000df8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <vPortEnterCritical+0x54>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10e      	bne.n	8000e20 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <vPortEnterCritical+0x58>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d009      	beq.n	8000e20 <vPortEnterCritical+0x48>
 8000e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e10:	f383 8811 	msr	BASEPRI, r3
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	f3bf 8f4f 	dsb	sy
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	e7fe      	b.n	8000e1e <vPortEnterCritical+0x46>
	}
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000014 	.word	0x20000014
 8000e30:	e000ed04 	.word	0xe000ed04

08000e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <vPortExitCritical+0x4c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <vPortExitCritical+0x22>
 8000e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e46:	f383 8811 	msr	BASEPRI, r3
 8000e4a:	f3bf 8f6f 	isb	sy
 8000e4e:	f3bf 8f4f 	dsb	sy
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	e7fe      	b.n	8000e54 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <vPortExitCritical+0x4c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <vPortExitCritical+0x4c>)
 8000e5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <vPortExitCritical+0x4c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d104      	bne.n	8000e72 <vPortExitCritical+0x3e>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000014 	.word	0x20000014
	...

08000e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e90:	f3ef 8009 	mrs	r0, PSP
 8000e94:	f3bf 8f6f 	isb	sy
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <pxCurrentTCBConst>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f01e 0f10 	tst.w	lr, #16
 8000ea0:	bf08      	it	eq
 8000ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eaa:	6010      	str	r0, [r2, #0]
 8000eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eb4:	f380 8811 	msr	BASEPRI, r0
 8000eb8:	f3bf 8f4f 	dsb	sy
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f7ff fe58 	bl	8000b74 <vTaskSwitchContext>
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	f380 8811 	msr	BASEPRI, r0
 8000ecc:	bc09      	pop	{r0, r3}
 8000ece:	6819      	ldr	r1, [r3, #0]
 8000ed0:	6808      	ldr	r0, [r1, #0]
 8000ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed6:	f01e 0f10 	tst.w	lr, #16
 8000eda:	bf08      	it	eq
 8000edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000ee0:	f380 8809 	msr	PSP, r0
 8000ee4:	f3bf 8f6f 	isb	sy
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w

08000ef0 <pxCurrentTCBConst>:
 8000ef0:	2000003c 	.word	0x2000003c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop

08000ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	__asm volatile
 8000efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000f10:	f7ff fd78 	bl	8000a04 <xTaskIncrementTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SysTick_Handler+0x3c>)
 8000f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f44:	f7ff fcb4 	bl	80008b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f48:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <pvPortMalloc+0x178>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000f50:	f000 f91a 	bl	8001188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <pvPortMalloc+0x17c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f040 8091 	bne.w	8001084 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01c      	beq.n	8000fa2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000f68:	2208      	movs	r2, #8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d013      	beq.n	8000fa2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f023 0307 	bic.w	r3, r3, #7
 8000f80:	3308      	adds	r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <pvPortMalloc+0x6a>
	__asm volatile
 8000f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f92:	f383 8811 	msr	BASEPRI, r3
 8000f96:	f3bf 8f6f 	isb	sy
 8000f9a:	f3bf 8f4f 	dsb	sy
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e7fe      	b.n	8000fa0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d06d      	beq.n	8001084 <pvPortMalloc+0x14c>
 8000fa8:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <pvPortMalloc+0x180>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d868      	bhi.n	8001084 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <pvPortMalloc+0x184>)
 8000fb4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <pvPortMalloc+0x184>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fbc:	e004      	b.n	8000fc8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d903      	bls.n	8000fda <pvPortMalloc+0xa2>
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f1      	bne.n	8000fbe <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <pvPortMalloc+0x178>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d04f      	beq.n	8001084 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2208      	movs	r2, #8
 8000fea:	4413      	add	r3, r2
 8000fec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	2308      	movs	r3, #8
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	429a      	cmp	r2, r3
 8001004:	d91e      	bls.n	8001044 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d009      	beq.n	800102c <pvPortMalloc+0xf4>
 8001018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e7fe      	b.n	800102a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	1ad2      	subs	r2, r2, r3
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f000 f904 	bl	800124c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <pvPortMalloc+0x180>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <pvPortMalloc+0x180>)
 8001050:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <pvPortMalloc+0x180>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <pvPortMalloc+0x188>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d203      	bcs.n	8001066 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <pvPortMalloc+0x180>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <pvPortMalloc+0x188>)
 8001064:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <pvPortMalloc+0x17c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	431a      	orrs	r2, r3
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <pvPortMalloc+0x18c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <pvPortMalloc+0x18c>)
 8001082:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001084:	f7ff fc22 	bl	80008cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <pvPortMalloc+0x16e>
 8001092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	f3bf 8f6f 	isb	sy
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e7fe      	b.n	80010a4 <pvPortMalloc+0x16c>
	return pvReturn;
 80010a6:	69fb      	ldr	r3, [r7, #28]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20012d40 	.word	0x20012d40
 80010b4:	20012d54 	.word	0x20012d54
 80010b8:	20012d44 	.word	0x20012d44
 80010bc:	20012d38 	.word	0x20012d38
 80010c0:	20012d48 	.word	0x20012d48
 80010c4:	20012d4c 	.word	0x20012d4c

080010c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d04b      	beq.n	8001172 <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80010da:	2308      	movs	r3, #8
 80010dc:	425b      	negs	r3, r3
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <vPortFree+0xb4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <vPortFree+0x42>
 80010f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fa:	f383 8811 	msr	BASEPRI, r3
 80010fe:	f3bf 8f6f 	isb	sy
 8001102:	f3bf 8f4f 	dsb	sy
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e7fe      	b.n	8001108 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <vPortFree+0x5e>
 8001112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001116:	f383 8811 	msr	BASEPRI, r3
 800111a:	f3bf 8f6f 	isb	sy
 800111e:	f3bf 8f4f 	dsb	sy
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	e7fe      	b.n	8001124 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <vPortFree+0xb4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01e      	beq.n	8001172 <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d11a      	bne.n	8001172 <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <vPortFree+0xb4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	43db      	mvns	r3, r3
 8001146:	401a      	ands	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800114c:	f7ff fbb0 	bl	80008b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <vPortFree+0xb8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4413      	add	r3, r2
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <vPortFree+0xb8>)
 800115c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800115e:	6938      	ldr	r0, [r7, #16]
 8001160:	f000 f874 	bl	800124c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <vPortFree+0xbc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <vPortFree+0xbc>)
 800116c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800116e:	f7ff fbad 	bl	80008cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20012d54 	.word	0x20012d54
 8001180:	20012d44 	.word	0x20012d44
 8001184:	20012d50 	.word	0x20012d50

08001188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800118e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <prvHeapInit+0xac>)
 8001196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00c      	beq.n	80011bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3307      	adds	r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 0307 	bic.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <prvHeapInit+0xac>)
 80011b8:	4413      	add	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <prvHeapInit+0xb0>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <prvHeapInit+0xb0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80011d4:	2208      	movs	r2, #8
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <prvHeapInit+0xb4>)
 80011e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <prvHeapInit+0xb4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <prvHeapInit+0xb4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <prvHeapInit+0xb4>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <prvHeapInit+0xb8>)
 8001216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <prvHeapInit+0xbc>)
 800121e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <prvHeapInit+0xc0>)
 8001222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000138 	.word	0x20000138
 8001238:	20012d38 	.word	0x20012d38
 800123c:	20012d40 	.word	0x20012d40
 8001240:	20012d48 	.word	0x20012d48
 8001244:	20012d44 	.word	0x20012d44
 8001248:	20012d54 	.word	0x20012d54

0800124c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <prvInsertBlockIntoFreeList+0xac>)
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e002      	b.n	8001260 <prvInsertBlockIntoFreeList+0x14>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	d8f7      	bhi.n	800125a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d108      	bne.n	800128e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	441a      	add	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	441a      	add	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d118      	bne.n	80012d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <prvInsertBlockIntoFreeList+0xb0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d00d      	beq.n	80012ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	441a      	add	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e008      	b.n	80012dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <prvInsertBlockIntoFreeList+0xb0>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e003      	b.n	80012dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d002      	beq.n	80012ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20012d38 	.word	0x20012d38
 80012fc:	20012d40 	.word	0x20012d40

08001300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001302:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0b      	ldr	r4, [pc, #44]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800132a:	f7fe ffa3 	bl	8000274 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800132e:	f000 f811 	bl	8001354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7fe ff6d 	bl	8000210 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001344:	080013dc 	.word	0x080013dc
  ldr r2, =_sbss
 8001348:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800134c:	20012d58 	.word	0x20012d58

08001350 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>
	...

08001354 <__libc_init_array>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	4e0d      	ldr	r6, [pc, #52]	; (800138c <__libc_init_array+0x38>)
 8001358:	4c0d      	ldr	r4, [pc, #52]	; (8001390 <__libc_init_array+0x3c>)
 800135a:	1ba4      	subs	r4, r4, r6
 800135c:	10a4      	asrs	r4, r4, #2
 800135e:	2500      	movs	r5, #0
 8001360:	42a5      	cmp	r5, r4
 8001362:	d109      	bne.n	8001378 <__libc_init_array+0x24>
 8001364:	4e0b      	ldr	r6, [pc, #44]	; (8001394 <__libc_init_array+0x40>)
 8001366:	4c0c      	ldr	r4, [pc, #48]	; (8001398 <__libc_init_array+0x44>)
 8001368:	f000 f820 	bl	80013ac <_init>
 800136c:	1ba4      	subs	r4, r4, r6
 800136e:	10a4      	asrs	r4, r4, #2
 8001370:	2500      	movs	r5, #0
 8001372:	42a5      	cmp	r5, r4
 8001374:	d105      	bne.n	8001382 <__libc_init_array+0x2e>
 8001376:	bd70      	pop	{r4, r5, r6, pc}
 8001378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800137c:	4798      	blx	r3
 800137e:	3501      	adds	r5, #1
 8001380:	e7ee      	b.n	8001360 <__libc_init_array+0xc>
 8001382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001386:	4798      	blx	r3
 8001388:	3501      	adds	r5, #1
 800138a:	e7f2      	b.n	8001372 <__libc_init_array+0x1e>
 800138c:	080013d4 	.word	0x080013d4
 8001390:	080013d4 	.word	0x080013d4
 8001394:	080013d4 	.word	0x080013d4
 8001398:	080013d8 	.word	0x080013d8

0800139c <memset>:
 800139c:	4402      	add	r2, r0
 800139e:	4603      	mov	r3, r0
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d100      	bne.n	80013a6 <memset+0xa>
 80013a4:	4770      	bx	lr
 80013a6:	f803 1b01 	strb.w	r1, [r3], #1
 80013aa:	e7f9      	b.n	80013a0 <memset+0x4>

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
